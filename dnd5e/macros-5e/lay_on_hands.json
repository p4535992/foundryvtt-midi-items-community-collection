{
  "name": "Lay on Hands",
  "permission": {
    "default": 0
  },
  "type": "script",
  "flags": {},
  "scope": "global",
  "command": "/**\r\n * System: D&D5e\r\n * Apply lay-on-hands feat to a target character.  Asks the player how many HP to heal and\r\n * verifies the entered value is within range before marking down usage counter. If the player\r\n * has OWNER permissions of target (such as GM or self-heal) the HP are applied automatically; \r\n * otherwise, a 'roll' message appears allowing the target character to right-click to apply healing.\r\n */\r\n\r\n(async () => {\r\n\r\nconst layName = \"Lay on Hands\";\r\nlet confirmed = false;\r\nlet actorData = actor || canvas.tokens.controlled[0] || game.user.character;\r\nlet featData = actorData ? actorData.items.find(i => i.name===layName) : null;\r\n\r\nif(actorData == null || featData == null) \r\n    ui.notifications.warn(`Selected hero must have ${layName} feat.`);\r\nelse if (game.user.targets.size !== 1)\r\n    ui.notifications.warn(`Please target one token.`);\r\nelse\r\n{\r\n    let featUpdate = duplicate(featData);\r\n    let targetActor = game.user.targets.values().next().value.actor;\r\n    let maxHeal = Math.clamped(featUpdate.data.uses.value, 0, \r\n        targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\r\n\r\n    let content = `<p><em>${actorData.name} lays hands on ${targetActor.data.name}.</em></p>\r\n                    <p>How many HP do you want to restore to ${targetActor.data.name}?</p>\r\n                    <form>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"num\">HP to Restore: (Max = ${maxHeal})</label>\r\n                            <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxHeal}\"></input>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"flavor\">Flavor:</label>\r\n                            <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\r\n                        </div>\r\n                    </form>`;\r\n    new Dialog({\r\n        title: \"Lay on Hands Healing\",\r\n        content: content,      \r\n        buttons: {\r\n            heal: { label: \"Heal!\", callback: () => confirmed = true },\r\n            cancel: { label: \"Cancel\", callback: () => confirmed = false }\r\n        },\r\n        default: \"heal\",\r\n\r\n        close: html => {\r\n            (async () => {\r\n            if (confirmed) \r\n            {\r\n                let number = Math.floor(Number(html.find('#num')[0].value));\r\n                if (number < 1 || number > maxHeal)\r\n                    ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\r\n                else\r\n                {\r\n                    let flavor = `<strong>${html.find('#flavor')[0].value}</strong><br>`;\r\n                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER)\r\n                        // We need help applying the healing, so make a roll message for right-click convenience.\r\n                        await new Roll(`${number}`).toMessage({\r\n                            speaker: ChatMessage.getSpeaker(),\r\n                            flavor: `${actorData.name} lays hands on ${targetActor.data.name}.<br>${flavor}\r\n                            <p><em>Manually apply ${number} HP of healing to ${targetActor.data.name}</em></p>` });\r\n                    else {\r\n                        // We can apply healing automatically, so just show a normal chat message.\r\n                        ChatMessage.create({\r\n                            speaker: ChatMessage.getSpeaker(),\r\n                            content: `${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.<br>${flavor}`\r\n                        });\r\n                        await targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number});\r\n                    }\r\n                     \r\n                    //Update the value under \"Features\"\r\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\r\n                    await actorData.items.getName(layName).update({ \"data.uses.value\" : featUpdate.data.uses.value });\r\n\r\n                    //Update resource counter only if the \"Lay on Hands\" feature is set to consume it\r\n                    let resString = featUpdate.data.consume.target;\r\n                    if(resString.indexOf('resources') >= 0) {\r\n                       await actorData.update({\r\n                           data: { [featUpdate.data.consume.target] : featUpdate.data.uses.value }\r\n                       });\r\n                    }\r\n\r\n                    if (actorData.sheet.rendered) {\r\n                       // Update the actor sheet if it is currently open\r\n                       await actorData.render(true);\r\n                    }\r\n                };\r\n            }\r\n            })();\r\n        }\r\n    }).render(true);\r\n}\r\n})();\r\n",
  "author": "",
  "img": "icons/svg/dice-target.svg",
  "actorIds": [],
  "_id": "WhAe42txHIkeZk2s"
}
