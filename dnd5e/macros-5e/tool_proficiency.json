{
  "name": "Tool Proficiency",
  "permission": {
    "default": 0
  },
  "type": "script",
  "flags": {},
  "scope": "global",
  "command": "/**\r\n * Grab a list of tools in the selected player's inventory, then all the user to make a roll on the tool.\r\n * Will take into consideration if the player is proficient in using the tool.\r\n */\r\n\r\n// get the first entry from the array of currently selected tokens. Works best/exclusively with one selected token\r\nconst target = canvas.tokens.controlled[0].actor;\r\n// get the abilities of the selected token for ease of access later\r\nconst { abilities } = target.data.data;\r\n// Only items set as \"tools\" will be included!\r\n// get all held and equipped Tools/Kits/Supplies. Might want to replace with /[tT]ools|[kK]it|[sS]upplies|[sS]et$/ if gaming sets should be included\r\nconst toolsInInventory = target.items.filter( item => item.name.match(/[tT]ools|[kK]it|[sS]upplies$/) && item.data.data.hasOwnProperty(\"proficient\"));\r\n// const toolProficiencies = target.data.data.traits.toolProf; // Tools have proficiency mod in the object under <item>.data.data.proficient. \r\nlet tool = undefined;\r\n\r\n// Choose ability mod dialog\r\nconst abilityDialog = (async () => {\r\n    let template = `\r\n    <div>\r\n        <div class=\"form-group\">\r\n            <label>Choose ability</label>\r\n            <select id=\"selectedAbility\">`\r\n    for (let ability in abilities) {\r\n        switch (ability) {\r\n            case \"str\":\r\n                abilities[ability].name = \"Strength\"\r\n                break;\r\n            case \"dex\":\r\n                abilities[ability].name = \"Dexterity\"\r\n                break;\r\n            case \"con\":\r\n                abilities[ability].name = \"Constitution\"\r\n                break;\r\n            case \"int\":\r\n                abilities[ability].name = \"Intelligence\"\r\n                break;\r\n            case \"wis\":\r\n                abilities[ability].name = \"Wisdom\"\r\n                break;\r\n            case \"cha\":\r\n                abilities[ability].name = \"Charisma\"\r\n                break;\r\n            default:\r\n                console.log(\"something went wrong\");\r\n        }\r\n        template += `<option value=\"${ability}\">${abilities[ability].name} (${abilities[ability].value})</option>`;\r\n    }\r\n    template += `</select>\r\n        </div>\r\n    </div>`\r\n\r\n\r\n    new Dialog({\r\n        title: tool.name,\r\n        content: template,\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\",\r\n                callback: async (html) => {\r\n                    const selection = html.find(\"#selectedAbility\")[0].value;\r\n                    console.log(tool, target);\r\n                    let prof = tool.data.data.proficient * target.data.data.attributes.prof; // target might be half or doubly proficient. This will make sure it is accounted for\r\n\r\n                    let messageContent = `${target.name} rolled a <b>[[1d20+${abilities[selection].mod}(${abilities[selection].name})+${prof}(Proficiency)]]</b> for the ${tool.name} check.<br>`;\r\n                    let chatData = {\r\n                        user: game.user.id,\r\n                        speaker: ChatMessage.getSpeaker(),\r\n                        content: messageContent,\r\n                        // uncomment the line below to always whisper the roll to the GM\r\n                        // whisper: game.users.filter(u => u.isGM).map(u => u._id)\r\n                    };\r\n                    ChatMessage.create(chatData, {});\r\n               }\r\n            },\r\n            cancel: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: 'Cancel'\r\n            }\r\n        },\r\n        default: \"cancel\"\r\n    }).render(true);\r\n})\r\n\r\n// Choose tool dialog\r\nif (toolsInInventory.length) {\r\n    (async () => {\r\n        let template = `\r\n        <div>\r\n            <div class=\"form-group\">\r\n                <label>Choose a tool</label>\r\n                <select id=\"selectedTool\">`\r\n        toolsInInventory.forEach( tempTool => {    \r\n            template += `<option value=\"${tempTool.name}\">${tempTool.name}</option>`;\r\n        });\r\n        template += `</select>\r\n            </div>\r\n        </div>`;\r\n\r\n        new Dialog({\r\n            title: 'Which tool?',\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: \"OK\",\r\n                    callback: async (html) => {\r\n                        let selection = html.find(\"#selectedTool\")[0].value;\r\n                        tool = toolsInInventory.find( item => item.name === selection )\r\n                        abilityDialog();\r\n                   }\r\n                },\r\n                cancel: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: 'Cancel'\r\n                }\r\n            },\r\n            default: \"cancel\"\r\n        }).render(true);\r\n    })()    \r\n}\r\n\r\nelse {\r\n    new Dialog({\r\n        title: 'No Tools!',\r\n        content: '<p>You don\\'t seem to have any tool with you.</p>',\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\"\r\n            }\r\n        },\r\n        default: \"ok\"\r\n    }).render(true);\r\n}\r\n",
  "author": "",
  "img": "icons/svg/dice-target.svg",
  "actorIds": [],
  "_id": "vwfOm1Z1kY4EZS1G"
}
