{
  "name": "Divine Smite",
  "permission": {
    "default": 0
  },
  "type": "script",
  "flags": {},
  "scope": "global",
  "command": "/*\r\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\r\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\r\n * will also increase the number of damage dice.\r\n * \r\n * If a token is not selected, the macro will default back to the default character for the Actor. \r\n * This allows for the GM to cast the macro on behalf a character that possesses it, \r\n * without requiring that a PC have their character selected.\r\n * To execute the macro a target MUST be specified and, unless configured otherwise, the character must have an available spell slot. \r\n * Make your regular attack and then if you choose to use Divine Smite, run this macro.\r\n */\r\n\r\n(() => {\r\n\r\n//Configurable variables\r\nlet maxSpellSlot = 5; //  Highest spell-slot level that may be used.\r\nlet affectedCreatureTypes = [\"fiend\", \"undead\", \"undead (shapechanger)\"]; //  Creature types that take extra damage.\r\n\r\n// Use token selected, or default character for the Actor if none is.\r\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;     \r\n\r\n// Flag for selected slot type\r\nlet pactSlot = false;\r\n\r\n// Verifies if the actor can smite.\r\nif (s_actor?.data.items.find(i => i.name === \"Divine Smite\") === undefined){\r\n    return ui.notifications.error(`No valid actor selected that can use this macro.`);\r\n}\r\n\r\nlet confirmed = false;\r\nif (hasAvailableSlot(s_actor)) {\r\n\r\n    // Get options for available slots\r\n    let optionsText = \"\";\r\n    let i = 1;\r\n    for (; i < maxSpellSlot; i++) {\r\n        const slots = getSpellSlots(s_actor, i, false);\r\n        if (slots.value > 0) {\r\n            const level = CONFIG.DND5E.spellLevels[i];\r\n            const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\r\n            optionsText += `<option value=\"${i}\">${label}</option>`;\r\n        }\r\n    }\r\n\r\n    // Check for Pact slot\r\n    const slots = getSpellSlots(s_actor, 0, true);\r\n    if(slots.value > 0) {\r\n        i++;\r\n        const level = CONFIG.DND5E.spellLevels[slots.level];\r\n        const label = 'Pact: ' + game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\r\n        optionsText += `<option value=\"${i}\">${label}</option>`;\r\n    }\r\n\r\n    // Create a dialogue box to select spell slot level to use when smiting.\r\n    new Dialog({\r\n        title: \"Divine Smite: Usage Configuration\",\r\n        content: `\r\n        <form id=\"smite-use-form\">\r\n            <p>` + game.i18n.format(\"DND5E.AbilityUseHint\", {name: \"Divine Smite\", type: \"feature\"}) + `</p>\r\n            <div class=\"form-group\">\r\n                <label>Spell Slot Level</label>\r\n                <div class=\"form-fields\">\r\n                    <select name=\"slot-level\">` + optionsText + `</select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label class=\"checkbox\">\r\n                <input type=\"checkbox\" name=\"consumeCheckbox\" checked/>` + game.i18n.localize(\"DND5E.SpellCastConsume\") + `</label>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label class=\"checkbox\">\r\n                <input type=\"checkbox\" name=\"criticalCheckbox\"/>` + game.i18n.localize(\"DND5E.CriticalHit\") + \"?\" + `</label>\r\n            </div>\r\n        </form>\r\n        `,\r\n        buttons: {\r\n            one: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"SMITE!\",\r\n                callback: () => confirmed = true\r\n            },\r\n            two: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: \"Cancel\",\r\n                callback: () => confirmed = false\r\n            }\r\n        },\r\n        default: \"Cancel\",\r\n        close: html => {\r\n            if (confirmed) {\r\n                let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\r\n                if(slotLevel > maxSpellSlot) {\r\n                    slotLevel = actor.data.data.spells.pact.level;\r\n                    pactSlot = true;\r\n                }\r\n                const criticalHit = html.find('[name=criticalCheckbox]')[0].checked;\t\t\t\t\r\n                const consumeSlot = html.find('[name=consumeCheckbox]')[0].checked;\r\n                smite(s_actor, slotLevel, criticalHit, consumeSlot, pactSlot);\r\n            }\r\n        }\r\n    }).render(true);\r\n\r\n} else {\r\n    return ui.notifications.error(`No spell slots available to use this feature.`);    \r\n}\r\n\r\n/**\r\n * Gives the spell slot information for a particular actor and spell slot level.\r\n * @param {Actor5e} actor - the actor to get slot information from.\r\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\r\n * @param {boolean} isPact - whether the spell slot is obtained through pact.\r\n * @returns {object} contains value (number of slots remaining), max, and override.\r\n */\r\nfunction getSpellSlots(actor, level, isPact) {\r\n    if(isPact == false) {\r\n        return actor.data.data.spells[`spell${level}`];\r\n    }\r\n    else {\r\n        return actor.data.data.spells.pact;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns whether the actor has any spell slot left.\r\n * @param {Actor5e} actor - the actor to get slot information from.\r\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\r\n */\r\n function hasAvailableSlot(actor) {\r\n    for (let slot in actor.data.data.spells) {\r\n        if (actor.data.data.spells[slot].value > 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n }\r\n\r\n/**\r\n * Use the controlled token to smite the targeted token.\r\n * @param {Actor5e} actor - the actor that is performing the action.\r\n * @param {integer} slotLevel - the spell slot level to use when smiting.\r\n * @param {boolean} criticalHit - whether the hit is a critical hit.\r\n * @param {boolean} consume - whether to consume the spell slot.\r\n * @param {boolean} isPact - whether the spell slot used is obtained through pact.\r\n */\r\nasync function smite(actor, slotLevel, criticalHit, consume, isPact) {\r\n    let targets = game.user.targets;\r\n\r\n    let chosenSpellSlots = getSpellSlots(actor, slotLevel, isPact);\r\n\r\n    if (chosenSpellSlots.value < 1) {\r\n        ui.notifications.error(\"No spell slots of the required level available.\");\r\n        return;\r\n    }\r\n    if (targets.size !== 1) {\r\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\r\n        return;\r\n    }\r\n\r\n    const [target] = targets;\r\n    let numDice = slotLevel + 1;\r\n    let type = target.actor.data.data.details.type.value?.toLocaleLowerCase();\r\n    if (affectedCreatureTypes.includes(type)) numDice += 1;\r\n    if (criticalHit) numDice *= 2;\r\n    const flavor = `Macro Divine Smite - ${game.i18n.localize(\"DND5E.DamageRoll\")} (${game.i18n.localize(\"DND5E.DamageRadiant\")})`;\r\n    let damageRoll = new Roll(`${numDice}d8`);\r\n\r\n    let targetActor = game.user.targets.values().next().value.actor;\r\n    \r\n    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER) {\r\n        // We need help applying the damage, so make a roll message for right-click convenience.\r\n        await damageRoll.toMessage({\r\n            speaker: ChatMessage.getSpeaker(),\r\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\r\n            <p><em>Manually apply (or right-click) ${damageRoll.result} HP of damage to ${targetActor.data.name}</em></p>` });\r\n    }\r\n    else {\r\n        // We can apply damage automatically, so just show a normal chat message.\r\n        await damageRoll.toMessage({\r\n            speaker: ChatMessage.getSpeaker(),\r\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\r\n            <p><em>${targetActor.data.name} has taken ${damageRoll.result} HP of damage.</em></p>` });\r\n        targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value - damageRoll.result});\r\n    }\r\n\r\n    if (consume){\r\n        let objUpdate = new Object();\r\n        if(isPact == false) {\r\n            objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\r\n        }\r\n        else {\r\n            objUpdate['data.spells.pact.value'] = chosenSpellSlots.value - 1;\r\n        }\r\n        \r\n        actor.update(objUpdate);\r\n    }\r\n}\r\n\r\n})();\r\n",
  "author": "",
  "img": "icons/svg/dice-target.svg",
  "actorIds": [],
  "_id": "mzvF9reAuonv5d4a"
}
