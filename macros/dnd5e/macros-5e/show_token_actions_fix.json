{
  "name": "Show Token Actions Fix",
  "permission": {
    "default": 0
  },
  "type": "script",
  "flags": {},
  "scope": "global",
  "command": "/*\r\n* Requires: DND5e.\r\n* Provides a dialog showing all action-triggered equipment, prepared and at-will spells, feats, and consumables,\r\n* as well as passive feats. Hopefully makes triggering actions easier without needing the character sheet open\r\n* all the time.\r\n* WARNING: Very ugly.\r\n* author/blame: ^ and stick#0520\r\n* with enormous help on the button events (and no blame to be attributed to): Skimble#8601\r\n*/\r\n\r\nclass ActionDialog extends Application {\r\n    super(options){\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        const buttons = html.find(\"button[class='show-action-button']\");\r\n\r\n        if (buttons.length > 0)\r\n            buttons.on(\"click\", event => {this.openActionTab(event, html);});\r\n    }\r\n\r\n    openActionTab(event, html) {\r\n        // Declare all variables\r\n        var i, tabcontent, tablinks;\r\n\r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName(\"show-action-category\");\r\n        for (let t of tabcontent) {\r\n            t.style.display = \"none\";\r\n        }\r\n\r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName(\"show-action-button\");\r\n        for (let t of tablinks) {\r\n            t.className = t.className.replace(\" active\", \"\");\r\n        }\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        if (event.target.value == \"showActionAll\") {\r\n            tabcontent = document.getElementsByClassName(\"show-action-category\");\r\n            for (let t of tabcontent) {\r\n                t.style.display= \"block\";\r\n            }\r\n        } else {\r\n            if (document.getElementById(event.target.value) != null)\r\n                document.getElementById(event.target.value).style.display = \"block\";\r\n        }\r\n        event.currentTarget.className += \" active\";\r\n    }\r\n\r\n    getData(){\r\n        // Get user's character or the first token from the controlled list.\r\n        function getTargetActor() {\r\n            const character = game.user.character;\r\n            if (character != null)\r\n                return character;\r\n\r\n            const controlled = canvas.tokens.controlled;\r\n\r\n            if (controlled.length === 0) return character || null;\r\n\r\n            if (controlled.length > 0 && controlled[0] != null) {\r\n                return controlled[0].actor;\r\n            }\r\n        }\r\n\r\n        function buildActionsList(targetActor) {\r\n            let equipped = targetActor.data.items.filter(i => i.type !=\"consumable\" && getProperty(i.data, \"data.equipped\"));\r\n            let activeEquipped = getActiveEquipment(equipped);\r\n            let weapons = activeEquipped.filter(i => i.type == \"weapon\");\r\n            let equipment = activeEquipped.filter(i => i.type == \"equipment\");\r\n\r\n            let other = activeEquipped.filter(i => i.type != \"weapon\" && i.type != \"equipment\");\r\n            let consumables = targetActor.data.items.filter(i => i.type == \"consumable\");\r\n            let items = { \"weapons\": weapons, \"equipment\": equipment, \"other\": other, \"consumables\": consumables };\r\n\r\n            let preparedSpells = targetActor.data.items.filter(i => i.type == \"spell\" && getProperty(i.data, \"data.preparation.prepared\"));\r\n            let spells = categoriseSpells(preparedSpells);\r\n\r\n            let allFeats = targetActor.data.items.filter(i => i.type == \"feat\");\r\n            let activeFeats = getActiveFeats(allFeats);\r\n            let passiveFeats =  getPassiveFeats(allFeats);\r\n            let feats = {\"active\": activeFeats, \"passive\": passiveFeats};\r\n\r\n\r\n            return { \"equipment\": items,\"spells\": spells, \"feats\": feats };\r\n        }\r\n\r\n        function getActiveEquipment(equipment) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n\r\n            let activeEquipment = equipment.filter(e => {\r\n                if (getProperty(e.data, \"data.activation\") == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (getProperty(e.data, \"data.activation.type\") == key)\r\n                        return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return activeEquipment;\r\n        }\r\n\r\n        function categoriseSpells(spells) {\r\n            let powers = {};\r\n            let book = {}\r\n\r\n            book = spells.reduce(function (book, spell) {\r\n                var level = getProperty(spell.data, \"data.level\");\r\n                let prep = getProperty(spell.data, \"data.preparation.mode\");\r\n\r\n                const prepTypes = game.dnd5e.config.spellPreparationModes;\r\n                let prepType = prepTypes[prep];\r\n\r\n                if (prep == \"pact\" || prep == \"atwill\" || prep == \"innate\") {\r\n                    if (!powers.hasOwnProperty(prepType)) {\r\n                        powers[prepTypes[prep]] = [];\r\n                    }\r\n\r\n                    powers[prepType].push(spell);\r\n                } else {\r\n                    if (!book.hasOwnProperty(level)) {\r\n                        book[level] = [];\r\n                    }\r\n\r\n                    book[level].push(spell);\r\n                }\r\n\r\n                return book;\r\n            }, {});\r\n\r\n            return {\"book\": Object.entries(book), \"powers\": Object.entries(powers)};\r\n        }\r\n\r\n        function getActiveFeats(feats) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n            let activeFeats = feats.filter(f => {\r\n                if (getProperty(f.data, \"data.activation\") == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (getProperty(f.data, \"data.activation.type\") == key)\r\n                        return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return Object.entries(activeFeats);\r\n        }\r\n\r\n        function getPassiveFeats(feats) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n            let passiveFeats = feats.filter(f => {\r\n                if (getProperty(f.data, \"data.activation\") == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (getProperty(f.data, \"data.activation\") == key)\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return Object.entries(passiveFeats);\r\n        }\r\n\r\n        function getContentTemplate(actions) {\r\n            let template = `\r\n            <div>\r\n                 ${getCssStyle()}\r\n                <div class=\"show-action-form-group\">\r\n                    <div class=\"show-action-buttons\">\r\n                        <button value=\"showActionItems\" class=\"show-action-button\">Items</button>\r\n                        <button value=\"showActionSpells\" class=\"show-action-button\">Spells</button>\r\n                        <button value=\"showActionFeats\" class=\"show-action-button\">Feats</button>\r\n                        <button value=\"showActionAll\" class=\"show-action-button\">Show all</button>\r\n                    </div>\r\n                    </div>\r\n                    <div class=\"show-action-categories\">\r\n                        <div id=\"showActionItems\" class=\"show-action-category\">\r\n                            ${getItemsTemplate(actions.equipment)}\r\n                        </div>\r\n                        <div id=\"showActionSpells\" class=\"show-action-category\">\r\n                            ${getSpellsTemplate(actions.spells)}\r\n                        <div id=\"showActionFeats\" class=\"show-action-category\">\r\n                            ${getFeatsTemplate(actions.feats)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        // Gets a template of abilities or skills, based on the type of check chosen.\r\n        function getItemsTemplate(items) {\r\n            if (items.weapons.length + items.equipment.length + items.other.length + items.consumables.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div id=\"actionItems\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Items</div>\r\n                                    ${getItemsCategoryTemplate(\"Weapons\", items.weapons)}\r\n                                    ${getItemsCategoryTemplate(\"Equipment\", items.equipment)}\r\n                                    ${getItemsCategoryTemplate(\"Other\", items.other)}\r\n                                    ${getItemsCategoryTemplate(\"Consumables\", items.consumables)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getSpellsTemplate(spells) {\r\n            let template = `<div id=\"actionSpells\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Spells</div>\r\n                                    ${getSpellsCategoryTemplate(spells.powers)}\r\n                                    ${getSpellsCategoryTemplate(spells.book)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getFeatsTemplate(feats) {\r\n            if (feats.active.length + feats.passive.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div id=\"actionFeats\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Feats</div>\r\n                                    ${getFeatsCategoryTemplate(\"Active\", feats.active)}\r\n                                    ${getFeatsCategoryTemplate(\"Passive\", feats.passive)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getItemsCategoryTemplate(title, items) {\r\n            if (items.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${title}</div>\r\n                            <div class=\"show-action-tabcontent-actions\">`;\r\n            for (let i of items) {\r\n                template += `<input id=\"weapon-${i.name}\" type=\"button\" value=\"${i.name}\" onclick=\"${getRollItemMacro(i.name)}\"/>`;\r\n            }\r\n\r\n            template += `</div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getSpellsCategoryTemplate(spells) {\r\n            if (spells.length === 0)\r\n                return \"\";\r\n\r\n            let template = \"\";\r\n\r\n            for (let [level, entries] of spells) {\r\n                console.log(!isNaN(level.toString()));\r\n                let subtitle = isNaN(level) ? level : (level.toString() === '0' ? `Cantrips` : `Level ${level}`);\r\n\r\n                template += `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\r\n                                <div class=\"show-action-tabcontent-actions\">`;\r\n\r\n                for (let s of entries) {\r\n                    template += `<input id=\"spell-${s.name}\" type=\"button\" value=\"${s.name}\" onclick=\"${getRollItemMacro(s.name)}\"/>`;\r\n                }\r\n\r\n                template += `</div>`;\r\n            }\r\n\r\n            return template;\r\n        }\r\n\r\n        function getFeatsCategoryTemplate(subtitle, feats) {\r\n            if (feats.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\r\n                            <div class=\"show-action-tabcontent-actions\">`\r\n\r\n            for (let [index, f] of feats) {\r\n                template += `<input id=\"feat-${f.name}\" type=\"button\" value=\"${f.name}\" onclick=\"${getRollItemMacro(f.name)}\"/>`;\r\n            }\r\n\r\n            template += `</div>`\r\n\r\n\r\n            return template;\r\n        }\r\n\r\n        function getCssStyle() {\r\n            return `\r\n            <style type=\"text/css\">\r\n            .show-action-buttons {\r\n                display: grid;\r\n                grid-template-columns: repeat(5, 1fr);\r\n                grid-gap: 10px;\r\n            }\r\n\r\n            .show-action-buttons button {\r\n                width: auto;\r\n                height: auto;\r\n                background-color: #eee;\r\n                float: left;\r\n                border: none;\r\n                outline: none;\r\n                cursor: pointer;\r\n                padding: 5px 8px;\r\n                transition: 0.3s;\r\n                display: block;\r\n              }\r\n                            \r\n              /* Change background color of buttons on hover */\r\n              .show-action-buttons button:hover {\r\n                background-color: #ddd;\r\n              }\r\n              \r\n              /* Create an active/current tablink class */\r\n              .show-action-buttons button.active {\r\n                background-color: #ccc;\r\n              }\r\n\r\n              .show-action-categories {\r\n                clear: both;\r\n              }\r\n              \r\n              /* Style the tab content */\r\n              .show-action-tabcontent {\r\n                display: block;\r\n                padding: 6px 12px;\r\n                border: 1px solid #ccc;\r\n                border-bottom: none;\r\n                border-left: none;\r\n                border-right: none;\r\n              }\r\n\r\n              .show-action-tabcontent-title {\r\n                    clear: both;\r\n                    font-size: large;\r\n              }\r\n\r\n              .show-action-tabcontent-subtitle {\r\n                  padding: 5px;\r\n                  margin: 2px;\r\n                  float: left;\r\n              }\r\n\r\n              .show-action-tabcontent input {\r\n                border: 1px solid #555;\r\n                padding: 5px;\r\n                margin: 2px;\r\n              }\r\n              \r\n              .show-action-tabcontent input:hover {\r\n              background-color: #ddd;\r\n              }\r\n            </style>`\r\n        }\r\n\r\n        function getRollItemMacro(itemName) {\r\n            return `game.dnd5e.rollItemMacro(&quot;${itemName}&quot;)`;\r\n        }\r\n\r\n        // set this to true if you want results whispered to the GM\r\n        let targetActor = getTargetActor();\r\n        let innerContent = \"\";\r\n\r\n        if (targetActor != null || targetActor) {\r\n            this.options.title = `${targetActor.name} actions`;\r\n            let actionLists = buildActionsList(targetActor);\r\n            innerContent = getContentTemplate(actionLists);\r\n        } else {\r\n            ui.notifications.error(\"No token selected or user character found.\");\r\n            throw new Error(\"No token selected or character found\");\r\n        }\r\n\r\n        var content =  `<div id=\"actionDialog\">${innerContent}</div>`;\r\n        var contentsObject = {content:`${content}`}\r\n        return contentsObject;\r\n    }\r\n}\r\n\r\nlet opt=Dialog.defaultOptions;\r\nopt.resizable=true;\r\nopt.title=\"Choose action\";\r\nopt.minimizable=true;\r\nopt.width=600;\r\nvar viewer;\r\nviewer = new ActionDialog(opt);\r\nviewer.render(true);\r\n",
  "author": "",
  "img": "icons/svg/dice-target.svg",
  "actorIds": []
}
